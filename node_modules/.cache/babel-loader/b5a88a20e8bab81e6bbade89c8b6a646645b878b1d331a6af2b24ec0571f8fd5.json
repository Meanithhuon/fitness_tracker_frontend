{"ast":null,"code":"var _jsxFileName = \"/Users/claytonc/Desktop/Coding_Stuff/Bootcamp/UNIV_Art_Collector_React_Starter/src/components/Search.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { fetchAllCenturies, fetchAllClassifications, fetchQueryResults } from '../api';\nconst Search = props => {\n  _s();\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {}, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"search\",\n    onSubmit: async event => {\n      // write code here\n      event.preventDefault();\n      setIsLoading(true);\n      try {\n        // something\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"keywords\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Query\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"keywords\",\n    type: \"text\",\n    placeholder: \"enter keywords...\",\n    value: queryString,\n    onChange: setQueryString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-classification\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Classification \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"classification-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 61\n    }\n  }, \"(\", classificationList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"classification\",\n    id: \"select-classification\",\n    value: classification,\n    onChange: setClassification(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Any\"))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-century\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Century \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"century-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 47\n    }\n  }, \"(\", centuryList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"century\",\n    id: \"select-century\",\n    value: century,\n    onChange: setCentury(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Any\"))), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, \"SEARCH\"));\n};\n_s(Search, \"q9Sa7SH5JDVcA0KiUTud6i4aT0A=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useEffect","useState","fetchAllCenturies","fetchAllClassifications","fetchQueryResults","Search","props","centuryList","setCenturyList","classificationList","setClassificationList","queryString","setQueryString","century","setCentury","classification","setClassification","event","preventDefault","setIsLoading","error","console","log","length"],"sources":["/Users/claytonc/Desktop/Coding_Stuff/Bootcamp/UNIV_Art_Collector_React_Starter/src/components/Search.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\"); \n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault()\n    setIsLoading(true)\n\n    try {\n      // something\n    } catch (error) {\n      console.log(error)\n    } finally {\n      setIsLoading(false)\n    }\n\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={setQueryString()}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={setClassification()}>\n        <option value=\"any\">Any</option>\n        {/* map over the classificationList, return an <option /> */}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={setCentury()}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}