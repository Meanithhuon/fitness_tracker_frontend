{"ast":null,"code":"// /**\n//  * This file features and exports all of your calls to the API\n//  * \n//  * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n//  */\n// export const BASE_URL = 'https://api.harvardartmuseums.org';\n// export const KEY = 'apikey=b73af61b-f643-4ac3-8b1f-4db2e08c4c20';\n\n// /**\n//  * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n//  */\n// export async function fetchQueryResultsFromTermAndValue(term, value) {\n//   try {\n//     const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n//     const data = await response.json();\n\n//     return data;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n//  */\n// export async function fetchQueryResultsFromURL(url) {\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n\n//     return data;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n//  * \n//  * Then makes a call to the API, and returns the first page of results\n//  */\n// export async function fetchQueryResults({\n//   century,\n//   classification,\n//   queryString,\n// }) {\n//   const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n//     century }&keyword=${ queryString }`;\n\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n\n//     return data;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n//  */\n// export async function fetchAllCenturies() {\n//   if (localStorage.getItem('centuries')) {\n//     return JSON.parse(localStorage.getItem('centuries'));\n//   }\n\n//   const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n//     const records = data.records;\n\n//     localStorage.setItem('centuries', JSON.stringify(records));\n\n//     return records;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n//  */\n// export async function fetchAllClassifications() {\n//   if (localStorage.getItem('classifications')) {\n//     return JSON.parse(localStorage.getItem('classifications'));\n//   }\n\n//   const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n//     const records = data.records;\n\n//     localStorage.setItem('classifications', JSON.stringify(records));\n\n//     return records;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\nconst baseURL = 'https://strangers-things.herokuapp.com/api/2209-FTB-MT-WEB-PT';\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log('Error registering user');\n  }\n};","map":{"version":3,"names":["baseURL","registerUser","username","password","response","fetch","method","headers","body","JSON","stringify","user","result","json","error","console","log"],"sources":["/Users/claytonc/Desktop/Coding_Stuff/Bootcamp/Art_Collector copy/src/api/index.js"],"sourcesContent":["// /**\n//  * This file features and exports all of your calls to the API\n//  * \n//  * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n//  */\n// export const BASE_URL = 'https://api.harvardartmuseums.org';\n// export const KEY = 'apikey=b73af61b-f643-4ac3-8b1f-4db2e08c4c20';\n\n// /**\n//  * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n//  */\n// export async function fetchQueryResultsFromTermAndValue(term, value) {\n//   try {\n//     const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n//     const data = await response.json();\n\n//     return data;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n//  */\n// export async function fetchQueryResultsFromURL(url) {\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n\n//     return data;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n//  * \n//  * Then makes a call to the API, and returns the first page of results\n//  */\n// export async function fetchQueryResults({\n//   century,\n//   classification,\n//   queryString,\n// }) {\n//   const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n//     century }&keyword=${ queryString }`;\n\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n\n//     return data;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n//  */\n// export async function fetchAllCenturies() {\n//   if (localStorage.getItem('centuries')) {\n//     return JSON.parse(localStorage.getItem('centuries'));\n//   }\n\n//   const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n//     const records = data.records;\n\n//     localStorage.setItem('centuries', JSON.stringify(records));\n\n//     return records;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\n// /**\n//  * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n//  */\n// export async function fetchAllClassifications() {\n//   if (localStorage.getItem('classifications')) {\n//     return JSON.parse(localStorage.getItem('classifications'));\n//   }\n\n//   const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n//   try {\n//     const response = await fetch(url);\n//     const data = await response.json();\n//     const records = data.records;\n\n//     localStorage.setItem('classifications', JSON.stringify(records));\n\n//     return records;\n//   } catch (error) {\n//     throw error;\n//   }\n// }\n\nconst baseURL = 'https://strangers-things.herokuapp.com/api/2209-FTB-MT-WEB-PT'\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    })\n    const result = await response.json();\n    return result;\n  } catch(error) {\n    console.log('Error registering user')\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAG,+DAA+D;AAE/E,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,OAAQ,iBAAgB,EAAE;MACxDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJT,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,MAAMS,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;IACpC,OAAOD,MAAM;EACf,CAAC,CAAC,OAAME,KAAK,EAAE;IACbC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}