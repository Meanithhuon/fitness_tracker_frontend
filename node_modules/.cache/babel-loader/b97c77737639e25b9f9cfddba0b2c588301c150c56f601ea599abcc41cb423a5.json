{"ast":null,"code":"var _jsxFileName = \"/Users/claytonc/Desktop/Coding_Stuff/Bootcamp/Art_Collector copy/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport { Posts, Title } from './components';\nconst App = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Posts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }));\n};\n_c = App;\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 17\n  }\n}), document.getElementById(\"app\"));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","Posts","Title","App","render","document","getElementById"],"sources":["/Users/claytonc/Desktop/Coding_Stuff/Bootcamp/Art_Collector copy/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Posts,\n  Title\n} from './components';\n\nconst App = () => {\n\n  return <div className=\"app\">\n    <Title />\n    <Posts />\n\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    {/* <Search /> */}\n    \n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    {/* <Preview /> */}\n\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    {/* <Feature /> */}\n\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {/* <Loading />  */}\n    {/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA,SACEC,KAAK,EACLC,KAAK,QACA,cAAc;AAErB,MAAMC,GAAG,GAAG,MAAM;EAEhB,oBAAO;IAAK,SAAS,EAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACzB,oBAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eACT,oBAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAcL;AACR,CAAC;AAAA,KAnBKA,GAAG;AAqBTH,QAAQ,CAACI,MAAM,eAAC,oBAAC,GAAG;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAAG,EAAEC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}